package com.facecompare.zhumu.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.facecompare.zhumu.common.dbentity.Personnel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSONNEL".
*/
public class PersonnelDao extends AbstractDao<Personnel, Long> {

    public static final String TABLENAME = "PERSONNEL";

    /**
     * Properties of entity Personnel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property IdName = new Property(2, String.class, "idName", false, "ID_NAME");
        public final static Property IdNum = new Property(3, String.class, "idNum", false, "ID_NUM");
        public final static Property IdSex = new Property(4, String.class, "idSex", false, "ID_SEX");
        public final static Property IdNation = new Property(5, String.class, "idNation", false, "ID_NATION");
        public final static Property IdBirthday = new Property(6, String.class, "idBirthday", false, "ID_BIRTHDAY");
        public final static Property IdAddress = new Property(7, String.class, "idAddress", false, "ID_ADDRESS");
        public final static Property IdPolice = new Property(8, String.class, "idPolice", false, "ID_POLICE");
        public final static Property IdPhoto = new Property(9, String.class, "idPhoto", false, "ID_PHOTO");
        public final static Property PhotoPath = new Property(10, String.class, "photoPath", false, "PHOTO_PATH");
        public final static Property ValidityTime = new Property(11, String.class, "validityTime", false, "VALIDITY_TIME");
        public final static Property Feature = new Property(12, byte[].class, "feature", false, "FEATURE");
        public final static Property Phone = new Property(13, String.class, "phone", false, "PHONE");
    }


    public PersonnelDao(DaoConfig config) {
        super(config);
    }
    
    public PersonnelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSONNEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GUID\" TEXT," + // 1: guid
                "\"ID_NAME\" TEXT," + // 2: idName
                "\"ID_NUM\" TEXT," + // 3: idNum
                "\"ID_SEX\" TEXT," + // 4: idSex
                "\"ID_NATION\" TEXT," + // 5: idNation
                "\"ID_BIRTHDAY\" TEXT," + // 6: idBirthday
                "\"ID_ADDRESS\" TEXT," + // 7: idAddress
                "\"ID_POLICE\" TEXT," + // 8: idPolice
                "\"ID_PHOTO\" TEXT," + // 9: idPhoto
                "\"PHOTO_PATH\" TEXT," + // 10: photoPath
                "\"VALIDITY_TIME\" TEXT," + // 11: validityTime
                "\"FEATURE\" BLOB," + // 12: feature
                "\"PHONE\" TEXT);"); // 13: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSONNEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Personnel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String idName = entity.getIdName();
        if (idName != null) {
            stmt.bindString(3, idName);
        }
 
        String idNum = entity.getIdNum();
        if (idNum != null) {
            stmt.bindString(4, idNum);
        }
 
        String idSex = entity.getIdSex();
        if (idSex != null) {
            stmt.bindString(5, idSex);
        }
 
        String idNation = entity.getIdNation();
        if (idNation != null) {
            stmt.bindString(6, idNation);
        }
 
        String idBirthday = entity.getIdBirthday();
        if (idBirthday != null) {
            stmt.bindString(7, idBirthday);
        }
 
        String idAddress = entity.getIdAddress();
        if (idAddress != null) {
            stmt.bindString(8, idAddress);
        }
 
        String idPolice = entity.getIdPolice();
        if (idPolice != null) {
            stmt.bindString(9, idPolice);
        }
 
        String idPhoto = entity.getIdPhoto();
        if (idPhoto != null) {
            stmt.bindString(10, idPhoto);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(11, photoPath);
        }
 
        String validityTime = entity.getValidityTime();
        if (validityTime != null) {
            stmt.bindString(12, validityTime);
        }
 
        byte[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindBlob(13, feature);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(14, phone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Personnel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String idName = entity.getIdName();
        if (idName != null) {
            stmt.bindString(3, idName);
        }
 
        String idNum = entity.getIdNum();
        if (idNum != null) {
            stmt.bindString(4, idNum);
        }
 
        String idSex = entity.getIdSex();
        if (idSex != null) {
            stmt.bindString(5, idSex);
        }
 
        String idNation = entity.getIdNation();
        if (idNation != null) {
            stmt.bindString(6, idNation);
        }
 
        String idBirthday = entity.getIdBirthday();
        if (idBirthday != null) {
            stmt.bindString(7, idBirthday);
        }
 
        String idAddress = entity.getIdAddress();
        if (idAddress != null) {
            stmt.bindString(8, idAddress);
        }
 
        String idPolice = entity.getIdPolice();
        if (idPolice != null) {
            stmt.bindString(9, idPolice);
        }
 
        String idPhoto = entity.getIdPhoto();
        if (idPhoto != null) {
            stmt.bindString(10, idPhoto);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(11, photoPath);
        }
 
        String validityTime = entity.getValidityTime();
        if (validityTime != null) {
            stmt.bindString(12, validityTime);
        }
 
        byte[] feature = entity.getFeature();
        if (feature != null) {
            stmt.bindBlob(13, feature);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(14, phone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Personnel readEntity(Cursor cursor, int offset) {
        Personnel entity = new Personnel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idSex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idNation
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // idBirthday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // idPolice
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // idPhoto
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photoPath
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // validityTime
            cursor.isNull(offset + 12) ? null : cursor.getBlob(offset + 12), // feature
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // phone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Personnel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdNation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdBirthday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdPolice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIdPhoto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhotoPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setValidityTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFeature(cursor.isNull(offset + 12) ? null : cursor.getBlob(offset + 12));
        entity.setPhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Personnel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Personnel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Personnel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
