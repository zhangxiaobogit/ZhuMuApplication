package com.facecompare.zhumu.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.facecompare.zhumu.common.dbentity.VisitorInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VISITOR_INFO".
*/
public class VisitorInfoDao extends AbstractDao<VisitorInfo, Long> {

    public static final String TABLENAME = "VISITOR_INFO";

    /**
     * Properties of entity VisitorInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VisitName = new Property(1, String.class, "visitName", false, "VISIT_NAME");
        public final static Property VisitSex = new Property(2, String.class, "visitSex", false, "VISIT_SEX");
        public final static Property VisitNation = new Property(3, String.class, "visitNation", false, "VISIT_NATION");
        public final static Property VisitNum = new Property(4, String.class, "visitNum", false, "VISIT_NUM");
        public final static Property VisitBirthday = new Property(5, String.class, "visitBirthday", false, "VISIT_BIRTHDAY");
        public final static Property VisitAddress = new Property(6, String.class, "visitAddress", false, "VISIT_ADDRESS");
        public final static Property VisitPolice = new Property(7, String.class, "visitPolice", false, "VISIT_POLICE");
        public final static Property VisitValidityTime = new Property(8, String.class, "visitValidityTime", false, "VISIT_VALIDITY_TIME");
        public final static Property VisitTime = new Property(9, String.class, "visitTime", false, "VISIT_TIME");
        public final static Property VisitIdCardImg = new Property(10, String.class, "visitIdCardImg", false, "VISIT_ID_CARD_IMG");
        public final static Property VisitNowImg = new Property(11, String.class, "visitNowImg", false, "VISIT_NOW_IMG");
        public final static Property VisitCompareFlag = new Property(12, String.class, "visitCompareFlag", false, "VISIT_COMPARE_FLAG");
        public final static Property VisitCompareScore = new Property(13, String.class, "visitCompareScore", false, "VISIT_COMPARE_SCORE");
        public final static Property VisitCompareType = new Property(14, String.class, "visitCompareType", false, "VISIT_COMPARE_TYPE");
        public final static Property UploadFlag = new Property(15, String.class, "uploadFlag", false, "UPLOAD_FLAG");
        public final static Property Uuid = new Property(16, String.class, "uuid", false, "UUID");
    }


    public VisitorInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VisitorInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VISITOR_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VISIT_NAME\" TEXT," + // 1: visitName
                "\"VISIT_SEX\" TEXT," + // 2: visitSex
                "\"VISIT_NATION\" TEXT," + // 3: visitNation
                "\"VISIT_NUM\" TEXT," + // 4: visitNum
                "\"VISIT_BIRTHDAY\" TEXT," + // 5: visitBirthday
                "\"VISIT_ADDRESS\" TEXT," + // 6: visitAddress
                "\"VISIT_POLICE\" TEXT," + // 7: visitPolice
                "\"VISIT_VALIDITY_TIME\" TEXT," + // 8: visitValidityTime
                "\"VISIT_TIME\" TEXT," + // 9: visitTime
                "\"VISIT_ID_CARD_IMG\" TEXT," + // 10: visitIdCardImg
                "\"VISIT_NOW_IMG\" TEXT," + // 11: visitNowImg
                "\"VISIT_COMPARE_FLAG\" TEXT," + // 12: visitCompareFlag
                "\"VISIT_COMPARE_SCORE\" TEXT," + // 13: visitCompareScore
                "\"VISIT_COMPARE_TYPE\" TEXT," + // 14: visitCompareType
                "\"UPLOAD_FLAG\" TEXT," + // 15: uploadFlag
                "\"UUID\" TEXT);"); // 16: uuid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VISITOR_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VisitorInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String visitName = entity.getVisitName();
        if (visitName != null) {
            stmt.bindString(2, visitName);
        }
 
        String visitSex = entity.getVisitSex();
        if (visitSex != null) {
            stmt.bindString(3, visitSex);
        }
 
        String visitNation = entity.getVisitNation();
        if (visitNation != null) {
            stmt.bindString(4, visitNation);
        }
 
        String visitNum = entity.getVisitNum();
        if (visitNum != null) {
            stmt.bindString(5, visitNum);
        }
 
        String visitBirthday = entity.getVisitBirthday();
        if (visitBirthday != null) {
            stmt.bindString(6, visitBirthday);
        }
 
        String visitAddress = entity.getVisitAddress();
        if (visitAddress != null) {
            stmt.bindString(7, visitAddress);
        }
 
        String visitPolice = entity.getVisitPolice();
        if (visitPolice != null) {
            stmt.bindString(8, visitPolice);
        }
 
        String visitValidityTime = entity.getVisitValidityTime();
        if (visitValidityTime != null) {
            stmt.bindString(9, visitValidityTime);
        }
 
        String visitTime = entity.getVisitTime();
        if (visitTime != null) {
            stmt.bindString(10, visitTime);
        }
 
        String visitIdCardImg = entity.getVisitIdCardImg();
        if (visitIdCardImg != null) {
            stmt.bindString(11, visitIdCardImg);
        }
 
        String visitNowImg = entity.getVisitNowImg();
        if (visitNowImg != null) {
            stmt.bindString(12, visitNowImg);
        }
 
        String visitCompareFlag = entity.getVisitCompareFlag();
        if (visitCompareFlag != null) {
            stmt.bindString(13, visitCompareFlag);
        }
 
        String visitCompareScore = entity.getVisitCompareScore();
        if (visitCompareScore != null) {
            stmt.bindString(14, visitCompareScore);
        }
 
        String visitCompareType = entity.getVisitCompareType();
        if (visitCompareType != null) {
            stmt.bindString(15, visitCompareType);
        }
 
        String uploadFlag = entity.getUploadFlag();
        if (uploadFlag != null) {
            stmt.bindString(16, uploadFlag);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(17, uuid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VisitorInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String visitName = entity.getVisitName();
        if (visitName != null) {
            stmt.bindString(2, visitName);
        }
 
        String visitSex = entity.getVisitSex();
        if (visitSex != null) {
            stmt.bindString(3, visitSex);
        }
 
        String visitNation = entity.getVisitNation();
        if (visitNation != null) {
            stmt.bindString(4, visitNation);
        }
 
        String visitNum = entity.getVisitNum();
        if (visitNum != null) {
            stmt.bindString(5, visitNum);
        }
 
        String visitBirthday = entity.getVisitBirthday();
        if (visitBirthday != null) {
            stmt.bindString(6, visitBirthday);
        }
 
        String visitAddress = entity.getVisitAddress();
        if (visitAddress != null) {
            stmt.bindString(7, visitAddress);
        }
 
        String visitPolice = entity.getVisitPolice();
        if (visitPolice != null) {
            stmt.bindString(8, visitPolice);
        }
 
        String visitValidityTime = entity.getVisitValidityTime();
        if (visitValidityTime != null) {
            stmt.bindString(9, visitValidityTime);
        }
 
        String visitTime = entity.getVisitTime();
        if (visitTime != null) {
            stmt.bindString(10, visitTime);
        }
 
        String visitIdCardImg = entity.getVisitIdCardImg();
        if (visitIdCardImg != null) {
            stmt.bindString(11, visitIdCardImg);
        }
 
        String visitNowImg = entity.getVisitNowImg();
        if (visitNowImg != null) {
            stmt.bindString(12, visitNowImg);
        }
 
        String visitCompareFlag = entity.getVisitCompareFlag();
        if (visitCompareFlag != null) {
            stmt.bindString(13, visitCompareFlag);
        }
 
        String visitCompareScore = entity.getVisitCompareScore();
        if (visitCompareScore != null) {
            stmt.bindString(14, visitCompareScore);
        }
 
        String visitCompareType = entity.getVisitCompareType();
        if (visitCompareType != null) {
            stmt.bindString(15, visitCompareType);
        }
 
        String uploadFlag = entity.getUploadFlag();
        if (uploadFlag != null) {
            stmt.bindString(16, uploadFlag);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(17, uuid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VisitorInfo readEntity(Cursor cursor, int offset) {
        VisitorInfo entity = new VisitorInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // visitName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // visitSex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // visitNation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // visitNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // visitBirthday
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // visitAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // visitPolice
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // visitValidityTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // visitTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // visitIdCardImg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // visitNowImg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // visitCompareFlag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // visitCompareScore
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // visitCompareType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // uploadFlag
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // uuid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VisitorInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVisitName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVisitSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVisitNation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVisitNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVisitBirthday(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVisitAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVisitPolice(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVisitValidityTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVisitTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVisitIdCardImg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVisitNowImg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVisitCompareFlag(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVisitCompareScore(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVisitCompareType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUploadFlag(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUuid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VisitorInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VisitorInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VisitorInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
